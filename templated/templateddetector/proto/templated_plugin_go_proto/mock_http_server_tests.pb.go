// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: mock_http_server_tests.proto

package templated_plugin_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MockHttpServer mocks an HTTP server.
type MockHttpServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A set of mock responses to be returned by the mock server. A mock response
	// is a pre-defined HTTP response that is returned by the mock server. It
	// contains a set of conditions based on the received request that can be used
	// to control when the response is returned.
	MockResponses []*MockHttpServer_MockResponse `protobuf:"bytes,1,rep,name=mock_responses,json=mockResponses,proto3" json:"mock_responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MockHttpServer) Reset() {
	*x = MockHttpServer{}
	mi := &file_mock_http_server_tests_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MockHttpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockHttpServer) ProtoMessage() {}

func (x *MockHttpServer) ProtoReflect() protoreflect.Message {
	mi := &file_mock_http_server_tests_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockHttpServer.ProtoReflect.Descriptor instead.
func (*MockHttpServer) Descriptor() ([]byte, []int) {
	return file_mock_http_server_tests_proto_rawDescGZIP(), []int{0}
}

func (x *MockHttpServer) GetMockResponses() []*MockHttpServer_MockResponse {
	if x != nil {
		return x.MockResponses
	}
	return nil
}

type MockHttpServer_HttpHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MockHttpServer_HttpHeader) Reset() {
	*x = MockHttpServer_HttpHeader{}
	mi := &file_mock_http_server_tests_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MockHttpServer_HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockHttpServer_HttpHeader) ProtoMessage() {}

func (x *MockHttpServer_HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_mock_http_server_tests_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockHttpServer_HttpHeader.ProtoReflect.Descriptor instead.
func (*MockHttpServer_HttpHeader) Descriptor() ([]byte, []int) {
	return file_mock_http_server_tests_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MockHttpServer_HttpHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MockHttpServer_HttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type MockHttpServer_HttpCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of headers and their expected values that must be present in the
	// request.
	Headers []*MockHttpServer_HttpHeader `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	// A list strings that must be present in the request's body.
	BodyContent   []string `protobuf:"bytes,2,rep,name=body_content,json=bodyContent,proto3" json:"body_content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MockHttpServer_HttpCondition) Reset() {
	*x = MockHttpServer_HttpCondition{}
	mi := &file_mock_http_server_tests_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MockHttpServer_HttpCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockHttpServer_HttpCondition) ProtoMessage() {}

func (x *MockHttpServer_HttpCondition) ProtoReflect() protoreflect.Message {
	mi := &file_mock_http_server_tests_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockHttpServer_HttpCondition.ProtoReflect.Descriptor instead.
func (*MockHttpServer_HttpCondition) Descriptor() ([]byte, []int) {
	return file_mock_http_server_tests_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MockHttpServer_HttpCondition) GetHeaders() []*MockHttpServer_HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *MockHttpServer_HttpCondition) GetBodyContent() []string {
	if x != nil {
		return x.BodyContent
	}
	return nil
}

type MockHttpServer_MockResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP status code to be returned by the mock server.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The URI on which this mock response will be returned.
	// Note that in the context of the mock, it **must** contain all GET
	// parameters. For example, `index.php?foo=bar`.
	// Although the leading slash is optional, it is recommended to include it
	// for clarity.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// The HTTP headers that the mock response will contain.
	Headers []*MockHttpServer_HttpHeader `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	// The body content of the mock response.
	BodyContent string `protobuf:"bytes,4,opt,name=body_content,json=bodyContent,proto3" json:"body_content,omitempty"`
	// A set of additional conditions on the received request that must be met
	// for this mock response to be sent.
	Condition     *MockHttpServer_HttpCondition `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MockHttpServer_MockResponse) Reset() {
	*x = MockHttpServer_MockResponse{}
	mi := &file_mock_http_server_tests_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MockHttpServer_MockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockHttpServer_MockResponse) ProtoMessage() {}

func (x *MockHttpServer_MockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mock_http_server_tests_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockHttpServer_MockResponse.ProtoReflect.Descriptor instead.
func (*MockHttpServer_MockResponse) Descriptor() ([]byte, []int) {
	return file_mock_http_server_tests_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MockHttpServer_MockResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MockHttpServer_MockResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MockHttpServer_MockResponse) GetHeaders() []*MockHttpServer_HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *MockHttpServer_MockResponse) GetBodyContent() string {
	if x != nil {
		return x.BodyContent
	}
	return ""
}

func (x *MockHttpServer_MockResponse) GetCondition() *MockHttpServer_HttpCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

var File_mock_http_server_tests_proto protoreflect.FileDescriptor

var file_mock_http_server_tests_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x22, 0xcd, 0x04, 0x0a, 0x0e, 0x4d, 0x6f, 0x63, 0x6b, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x0e, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x73,
	0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x4d,
	0x6f, 0x63, 0x6b, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0x36, 0x0a, 0x0a, 0x48, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x89, 0x01, 0x0a, 0x0d, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x48, 0x74, 0x74, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x90, 0x02,
	0x0a, 0x0c, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x55, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x73, 0x75, 0x6e,
	0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x63,
	0x6b, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x48, 0x74, 0x74,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0xa2, 0x01, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x50, 0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69,
	0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_mock_http_server_tests_proto_rawDescOnce sync.Once
	file_mock_http_server_tests_proto_rawDescData []byte
)

func file_mock_http_server_tests_proto_rawDescGZIP() []byte {
	file_mock_http_server_tests_proto_rawDescOnce.Do(func() {
		file_mock_http_server_tests_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mock_http_server_tests_proto_rawDesc), len(file_mock_http_server_tests_proto_rawDesc)))
	})
	return file_mock_http_server_tests_proto_rawDescData
}

var file_mock_http_server_tests_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mock_http_server_tests_proto_goTypes = []any{
	(*MockHttpServer)(nil),               // 0: tsunami_templated_detector_tests.MockHttpServer
	(*MockHttpServer_HttpHeader)(nil),    // 1: tsunami_templated_detector_tests.MockHttpServer.HttpHeader
	(*MockHttpServer_HttpCondition)(nil), // 2: tsunami_templated_detector_tests.MockHttpServer.HttpCondition
	(*MockHttpServer_MockResponse)(nil),  // 3: tsunami_templated_detector_tests.MockHttpServer.MockResponse
}
var file_mock_http_server_tests_proto_depIdxs = []int32{
	3, // 0: tsunami_templated_detector_tests.MockHttpServer.mock_responses:type_name -> tsunami_templated_detector_tests.MockHttpServer.MockResponse
	1, // 1: tsunami_templated_detector_tests.MockHttpServer.HttpCondition.headers:type_name -> tsunami_templated_detector_tests.MockHttpServer.HttpHeader
	1, // 2: tsunami_templated_detector_tests.MockHttpServer.MockResponse.headers:type_name -> tsunami_templated_detector_tests.MockHttpServer.HttpHeader
	2, // 3: tsunami_templated_detector_tests.MockHttpServer.MockResponse.condition:type_name -> tsunami_templated_detector_tests.MockHttpServer.HttpCondition
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_mock_http_server_tests_proto_init() }
func file_mock_http_server_tests_proto_init() {
	if File_mock_http_server_tests_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mock_http_server_tests_proto_rawDesc), len(file_mock_http_server_tests_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mock_http_server_tests_proto_goTypes,
		DependencyIndexes: file_mock_http_server_tests_proto_depIdxs,
		MessageInfos:      file_mock_http_server_tests_proto_msgTypes,
	}.Build()
	File_mock_http_server_tests_proto = out.File
	file_mock_http_server_tests_proto_goTypes = nil
	file_mock_http_server_tests_proto_depIdxs = nil
}
