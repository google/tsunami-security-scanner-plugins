// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: action_http.proto

package templated_plugin_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HttpAction_HttpMethod int32

const (
	HttpAction_METHOD_UNSPECIFIED HttpAction_HttpMethod = 0
	HttpAction_GET                HttpAction_HttpMethod = 1
	HttpAction_POST               HttpAction_HttpMethod = 2
	HttpAction_PUT                HttpAction_HttpMethod = 3
	HttpAction_DELETE             HttpAction_HttpMethod = 4
	HttpAction_HEAD               HttpAction_HttpMethod = 5
)

// Enum value maps for HttpAction_HttpMethod.
var (
	HttpAction_HttpMethod_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "GET",
		2: "POST",
		3: "PUT",
		4: "DELETE",
		5: "HEAD",
	}
	HttpAction_HttpMethod_value = map[string]int32{
		"METHOD_UNSPECIFIED": 0,
		"GET":                1,
		"POST":               2,
		"PUT":                3,
		"DELETE":             4,
		"HEAD":               5,
	}
)

func (x HttpAction_HttpMethod) Enum() *HttpAction_HttpMethod {
	p := new(HttpAction_HttpMethod)
	*p = x
	return p
}

func (x HttpAction_HttpMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpAction_HttpMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_action_http_proto_enumTypes[0].Descriptor()
}

func (HttpAction_HttpMethod) Type() protoreflect.EnumType {
	return &file_action_http_proto_enumTypes[0]
}

func (x HttpAction_HttpMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpAction_HttpMethod.Descriptor instead.
func (HttpAction_HttpMethod) EnumDescriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 0}
}

// HttpAction is used to perform HTTP requests.
type HttpAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP method to use (e.g. GET, POST, ...).
	Method HttpAction_HttpMethod `protobuf:"varint,1,opt,name=method,proto3,enum=tsunami_templated_detector.HttpAction_HttpMethod" json:"method,omitempty"`
	// One of several URIs to try (e.g. "/", "/somepage", ...). Tsunami will try
	// each URI until one succeeds. Each URI will reuse the other parameters of
	// the action (headers, extractions, etc...).
	Uri []string `protobuf:"bytes,2,rep,name=uri,proto3" json:"uri,omitempty"`
	// HTTP headers to add to the request.
	Headers []*HttpAction_HttpHeader `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	// Body of the HTTP request. Tsunami does not perform additional encoding of
	// this field. It should contain the raw data to be sent.
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Actions to be performed on the HTTP response.
	Response      *HttpAction_HttpResponse `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction) Reset() {
	*x = HttpAction{}
	mi := &file_action_http_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction) ProtoMessage() {}

func (x *HttpAction) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction.ProtoReflect.Descriptor instead.
func (*HttpAction) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0}
}

func (x *HttpAction) GetMethod() HttpAction_HttpMethod {
	if x != nil {
		return x.Method
	}
	return HttpAction_METHOD_UNSPECIFIED
}

func (x *HttpAction) GetUri() []string {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *HttpAction) GetHeaders() []*HttpAction_HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpAction) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *HttpAction) GetResponse() *HttpAction_HttpResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type HttpAction_HttpHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the header.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the header.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpHeader) Reset() {
	*x = HttpAction_HttpHeader{}
	mi := &file_action_http_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpHeader) ProtoMessage() {}

func (x *HttpAction_HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpHeader) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HttpAction_HttpHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpAction_HttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HttpAction_HttpResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP status code to expect from the response.
	HttpStatus int64 `protobuf:"varint,1,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
	// A set of expectations to check for on the response. For example, does
	// the header contains a specific value?
	// The expectations can either be ALL (all conditions must be met) or ANY
	// (matching stops at the first met condition).
	//
	// Types that are valid to be assigned to Expectations:
	//
	//	*HttpAction_HttpResponse_ExpectAny_
	//	*HttpAction_HttpResponse_ExpectAll_
	Expectations isHttpAction_HttpResponse_Expectations `protobuf_oneof:"expectations"`
	// Extract a value from the response and stores it in a variable. Failure
	// to extract all or one value (All/Any) causes the action to fail.
	//
	// ExtractAny: Matching stops at the first successful extraction.
	// ExtractAll: All extractions must be successful and modifies the current
	//
	//	environment.
	//
	// IMPORTANT NOTE: Any extractions can be used to circumvent slight version
	// variation in a product that would result in the same variable being set.
	// For example, matching a version tag that might be present in different
	// HTML tags depending on the version. It is STRONGLY recommended not to set
	// different variables using an ExtractAny as there will be no guarantee
	// which variable is set.
	//
	// Types that are valid to be assigned to Extractions:
	//
	//	*HttpAction_HttpResponse_ExtractAny_
	//	*HttpAction_HttpResponse_ExtractAll_
	Extractions   isHttpAction_HttpResponse_Extractions `protobuf_oneof:"extractions"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse) Reset() {
	*x = HttpAction_HttpResponse{}
	mi := &file_action_http_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse) ProtoMessage() {}

func (x *HttpAction_HttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1}
}

func (x *HttpAction_HttpResponse) GetHttpStatus() int64 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

func (x *HttpAction_HttpResponse) GetExpectations() isHttpAction_HttpResponse_Expectations {
	if x != nil {
		return x.Expectations
	}
	return nil
}

func (x *HttpAction_HttpResponse) GetExpectAny() *HttpAction_HttpResponse_ExpectAny {
	if x != nil {
		if x, ok := x.Expectations.(*HttpAction_HttpResponse_ExpectAny_); ok {
			return x.ExpectAny
		}
	}
	return nil
}

func (x *HttpAction_HttpResponse) GetExpectAll() *HttpAction_HttpResponse_ExpectAll {
	if x != nil {
		if x, ok := x.Expectations.(*HttpAction_HttpResponse_ExpectAll_); ok {
			return x.ExpectAll
		}
	}
	return nil
}

func (x *HttpAction_HttpResponse) GetExtractions() isHttpAction_HttpResponse_Extractions {
	if x != nil {
		return x.Extractions
	}
	return nil
}

func (x *HttpAction_HttpResponse) GetExtractAny() *HttpAction_HttpResponse_ExtractAny {
	if x != nil {
		if x, ok := x.Extractions.(*HttpAction_HttpResponse_ExtractAny_); ok {
			return x.ExtractAny
		}
	}
	return nil
}

func (x *HttpAction_HttpResponse) GetExtractAll() *HttpAction_HttpResponse_ExtractAll {
	if x != nil {
		if x, ok := x.Extractions.(*HttpAction_HttpResponse_ExtractAll_); ok {
			return x.ExtractAll
		}
	}
	return nil
}

type isHttpAction_HttpResponse_Expectations interface {
	isHttpAction_HttpResponse_Expectations()
}

type HttpAction_HttpResponse_ExpectAny_ struct {
	ExpectAny *HttpAction_HttpResponse_ExpectAny `protobuf:"bytes,2,opt,name=expect_any,json=expectAny,proto3,oneof"`
}

type HttpAction_HttpResponse_ExpectAll_ struct {
	ExpectAll *HttpAction_HttpResponse_ExpectAll `protobuf:"bytes,3,opt,name=expect_all,json=expectAll,proto3,oneof"`
}

func (*HttpAction_HttpResponse_ExpectAny_) isHttpAction_HttpResponse_Expectations() {}

func (*HttpAction_HttpResponse_ExpectAll_) isHttpAction_HttpResponse_Expectations() {}

type isHttpAction_HttpResponse_Extractions interface {
	isHttpAction_HttpResponse_Extractions()
}

type HttpAction_HttpResponse_ExtractAny_ struct {
	ExtractAny *HttpAction_HttpResponse_ExtractAny `protobuf:"bytes,4,opt,name=extract_any,json=extractAny,proto3,oneof"`
}

type HttpAction_HttpResponse_ExtractAll_ struct {
	ExtractAll *HttpAction_HttpResponse_ExtractAll `protobuf:"bytes,5,opt,name=extract_all,json=extractAll,proto3,oneof"`
}

func (*HttpAction_HttpResponse_ExtractAny_) isHttpAction_HttpResponse_Extractions() {}

func (*HttpAction_HttpResponse_ExtractAll_) isHttpAction_HttpResponse_Extractions() {}

type HttpAction_HttpResponse_Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the header.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse_Header) Reset() {
	*x = HttpAction_HttpResponse_Header{}
	mi := &file_action_http_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse_Header) ProtoMessage() {}

func (x *HttpAction_HttpResponse_Header) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse_Header.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse_Header) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *HttpAction_HttpResponse_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HttpAction_HttpResponse_Body struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse_Body) Reset() {
	*x = HttpAction_HttpResponse_Body{}
	mi := &file_action_http_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse_Body) ProtoMessage() {}

func (x *HttpAction_HttpResponse_Body) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse_Body.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse_Body) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1, 1}
}

type HttpAction_HttpResponse_Extract struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the variable to store the extracted value in.
	VariableName string `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	// The regexp to use to extract the value from the response.
	Regexp string `protobuf:"bytes,2,opt,name=regexp,proto3" json:"regexp,omitempty"`
	// Where to extract the value from.
	//
	// Types that are valid to be assigned to Extract:
	//
	//	*HttpAction_HttpResponse_Extract_FromHeader
	//	*HttpAction_HttpResponse_Extract_FromBody
	Extract       isHttpAction_HttpResponse_Extract_Extract `protobuf_oneof:"extract"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse_Extract) Reset() {
	*x = HttpAction_HttpResponse_Extract{}
	mi := &file_action_http_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse_Extract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse_Extract) ProtoMessage() {}

func (x *HttpAction_HttpResponse_Extract) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse_Extract.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse_Extract) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *HttpAction_HttpResponse_Extract) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *HttpAction_HttpResponse_Extract) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *HttpAction_HttpResponse_Extract) GetExtract() isHttpAction_HttpResponse_Extract_Extract {
	if x != nil {
		return x.Extract
	}
	return nil
}

func (x *HttpAction_HttpResponse_Extract) GetFromHeader() *HttpAction_HttpResponse_Header {
	if x != nil {
		if x, ok := x.Extract.(*HttpAction_HttpResponse_Extract_FromHeader); ok {
			return x.FromHeader
		}
	}
	return nil
}

func (x *HttpAction_HttpResponse_Extract) GetFromBody() *HttpAction_HttpResponse_Body {
	if x != nil {
		if x, ok := x.Extract.(*HttpAction_HttpResponse_Extract_FromBody); ok {
			return x.FromBody
		}
	}
	return nil
}

type isHttpAction_HttpResponse_Extract_Extract interface {
	isHttpAction_HttpResponse_Extract_Extract()
}

type HttpAction_HttpResponse_Extract_FromHeader struct {
	FromHeader *HttpAction_HttpResponse_Header `protobuf:"bytes,3,opt,name=from_header,json=fromHeader,proto3,oneof"`
}

type HttpAction_HttpResponse_Extract_FromBody struct {
	FromBody *HttpAction_HttpResponse_Body `protobuf:"bytes,4,opt,name=from_body,json=fromBody,proto3,oneof"`
}

func (*HttpAction_HttpResponse_Extract_FromHeader) isHttpAction_HttpResponse_Extract_Extract() {}

func (*HttpAction_HttpResponse_Extract_FromBody) isHttpAction_HttpResponse_Extract_Extract() {}

type HttpAction_HttpResponse_ExtractAll struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Patterns      []*HttpAction_HttpResponse_Extract `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse_ExtractAll) Reset() {
	*x = HttpAction_HttpResponse_ExtractAll{}
	mi := &file_action_http_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse_ExtractAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse_ExtractAll) ProtoMessage() {}

func (x *HttpAction_HttpResponse_ExtractAll) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse_ExtractAll.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse_ExtractAll) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *HttpAction_HttpResponse_ExtractAll) GetPatterns() []*HttpAction_HttpResponse_Extract {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type HttpAction_HttpResponse_ExtractAny struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Patterns      []*HttpAction_HttpResponse_Extract `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse_ExtractAny) Reset() {
	*x = HttpAction_HttpResponse_ExtractAny{}
	mi := &file_action_http_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse_ExtractAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse_ExtractAny) ProtoMessage() {}

func (x *HttpAction_HttpResponse_ExtractAny) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse_ExtractAny.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse_ExtractAny) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (x *HttpAction_HttpResponse_ExtractAny) GetPatterns() []*HttpAction_HttpResponse_Extract {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type HttpAction_HttpResponse_Expectation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value to expect in the response.
	Contains string `protobuf:"bytes,1,opt,name=contains,proto3" json:"contains,omitempty"`
	// Where to expect the value.
	//
	// Types that are valid to be assigned to Expectation:
	//
	//	*HttpAction_HttpResponse_Expectation_Header
	//	*HttpAction_HttpResponse_Expectation_Body
	Expectation   isHttpAction_HttpResponse_Expectation_Expectation `protobuf_oneof:"expectation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse_Expectation) Reset() {
	*x = HttpAction_HttpResponse_Expectation{}
	mi := &file_action_http_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse_Expectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse_Expectation) ProtoMessage() {}

func (x *HttpAction_HttpResponse_Expectation) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse_Expectation.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse_Expectation) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (x *HttpAction_HttpResponse_Expectation) GetContains() string {
	if x != nil {
		return x.Contains
	}
	return ""
}

func (x *HttpAction_HttpResponse_Expectation) GetExpectation() isHttpAction_HttpResponse_Expectation_Expectation {
	if x != nil {
		return x.Expectation
	}
	return nil
}

func (x *HttpAction_HttpResponse_Expectation) GetHeader() *HttpAction_HttpResponse_Header {
	if x != nil {
		if x, ok := x.Expectation.(*HttpAction_HttpResponse_Expectation_Header); ok {
			return x.Header
		}
	}
	return nil
}

func (x *HttpAction_HttpResponse_Expectation) GetBody() *HttpAction_HttpResponse_Body {
	if x != nil {
		if x, ok := x.Expectation.(*HttpAction_HttpResponse_Expectation_Body); ok {
			return x.Body
		}
	}
	return nil
}

type isHttpAction_HttpResponse_Expectation_Expectation interface {
	isHttpAction_HttpResponse_Expectation_Expectation()
}

type HttpAction_HttpResponse_Expectation_Header struct {
	Header *HttpAction_HttpResponse_Header `protobuf:"bytes,2,opt,name=header,proto3,oneof"`
}

type HttpAction_HttpResponse_Expectation_Body struct {
	Body *HttpAction_HttpResponse_Body `protobuf:"bytes,3,opt,name=body,proto3,oneof"`
}

func (*HttpAction_HttpResponse_Expectation_Header) isHttpAction_HttpResponse_Expectation_Expectation() {
}

func (*HttpAction_HttpResponse_Expectation_Body) isHttpAction_HttpResponse_Expectation_Expectation() {
}

type HttpAction_HttpResponse_ExpectAny struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Conditions    []*HttpAction_HttpResponse_Expectation `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse_ExpectAny) Reset() {
	*x = HttpAction_HttpResponse_ExpectAny{}
	mi := &file_action_http_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse_ExpectAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse_ExpectAny) ProtoMessage() {}

func (x *HttpAction_HttpResponse_ExpectAny) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse_ExpectAny.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse_ExpectAny) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1, 6}
}

func (x *HttpAction_HttpResponse_ExpectAny) GetConditions() []*HttpAction_HttpResponse_Expectation {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type HttpAction_HttpResponse_ExpectAll struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Conditions    []*HttpAction_HttpResponse_Expectation `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpAction_HttpResponse_ExpectAll) Reset() {
	*x = HttpAction_HttpResponse_ExpectAll{}
	mi := &file_action_http_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpAction_HttpResponse_ExpectAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAction_HttpResponse_ExpectAll) ProtoMessage() {}

func (x *HttpAction_HttpResponse_ExpectAll) ProtoReflect() protoreflect.Message {
	mi := &file_action_http_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAction_HttpResponse_ExpectAll.ProtoReflect.Descriptor instead.
func (*HttpAction_HttpResponse_ExpectAll) Descriptor() ([]byte, []int) {
	return file_action_http_proto_rawDescGZIP(), []int{0, 1, 7}
}

func (x *HttpAction_HttpResponse_ExpectAll) GetConditions() []*HttpAction_HttpResponse_Expectation {
	if x != nil {
		return x.Conditions
	}
	return nil
}

var File_action_http_proto protoreflect.FileDescriptor

var file_action_http_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0xbf, 0x0e, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x4b, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x36, 0x0a,
	0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x91, 0x0b, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x73,
	0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x79, 0x12, 0x5e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x73,
	0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x61, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6e, 0x79, 0x48, 0x01, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6e, 0x79, 0x12, 0x61, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x48,
	0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x1a, 0x1c, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x06, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x1a, 0x89, 0x02, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x5d, 0x0a, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x42, 0x6f, 0x64, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a,
	0x65, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x57, 0x0a,
	0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0x65, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x6e, 0x79, 0x12, 0x57, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x1a, 0xde, 0x01,
	0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x73, 0x75, 0x6e,
	0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42,
	0x0d, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6c,
	0x0a, 0x09, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x79, 0x12, 0x5f, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6c, 0x0a, 0x09,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x0a, 0x48, 0x74, 0x74,
	0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10,
	0x05, 0x42, 0x9c, 0x01, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_action_http_proto_rawDescOnce sync.Once
	file_action_http_proto_rawDescData []byte
)

func file_action_http_proto_rawDescGZIP() []byte {
	file_action_http_proto_rawDescOnce.Do(func() {
		file_action_http_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_action_http_proto_rawDesc), len(file_action_http_proto_rawDesc)))
	})
	return file_action_http_proto_rawDescData
}

var file_action_http_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_action_http_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_action_http_proto_goTypes = []any{
	(HttpAction_HttpMethod)(0),                  // 0: tsunami_templated_detector.HttpAction.HttpMethod
	(*HttpAction)(nil),                          // 1: tsunami_templated_detector.HttpAction
	(*HttpAction_HttpHeader)(nil),               // 2: tsunami_templated_detector.HttpAction.HttpHeader
	(*HttpAction_HttpResponse)(nil),             // 3: tsunami_templated_detector.HttpAction.HttpResponse
	(*HttpAction_HttpResponse_Header)(nil),      // 4: tsunami_templated_detector.HttpAction.HttpResponse.Header
	(*HttpAction_HttpResponse_Body)(nil),        // 5: tsunami_templated_detector.HttpAction.HttpResponse.Body
	(*HttpAction_HttpResponse_Extract)(nil),     // 6: tsunami_templated_detector.HttpAction.HttpResponse.Extract
	(*HttpAction_HttpResponse_ExtractAll)(nil),  // 7: tsunami_templated_detector.HttpAction.HttpResponse.ExtractAll
	(*HttpAction_HttpResponse_ExtractAny)(nil),  // 8: tsunami_templated_detector.HttpAction.HttpResponse.ExtractAny
	(*HttpAction_HttpResponse_Expectation)(nil), // 9: tsunami_templated_detector.HttpAction.HttpResponse.Expectation
	(*HttpAction_HttpResponse_ExpectAny)(nil),   // 10: tsunami_templated_detector.HttpAction.HttpResponse.ExpectAny
	(*HttpAction_HttpResponse_ExpectAll)(nil),   // 11: tsunami_templated_detector.HttpAction.HttpResponse.ExpectAll
}
var file_action_http_proto_depIdxs = []int32{
	0,  // 0: tsunami_templated_detector.HttpAction.method:type_name -> tsunami_templated_detector.HttpAction.HttpMethod
	2,  // 1: tsunami_templated_detector.HttpAction.headers:type_name -> tsunami_templated_detector.HttpAction.HttpHeader
	3,  // 2: tsunami_templated_detector.HttpAction.response:type_name -> tsunami_templated_detector.HttpAction.HttpResponse
	10, // 3: tsunami_templated_detector.HttpAction.HttpResponse.expect_any:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.ExpectAny
	11, // 4: tsunami_templated_detector.HttpAction.HttpResponse.expect_all:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.ExpectAll
	8,  // 5: tsunami_templated_detector.HttpAction.HttpResponse.extract_any:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.ExtractAny
	7,  // 6: tsunami_templated_detector.HttpAction.HttpResponse.extract_all:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.ExtractAll
	4,  // 7: tsunami_templated_detector.HttpAction.HttpResponse.Extract.from_header:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.Header
	5,  // 8: tsunami_templated_detector.HttpAction.HttpResponse.Extract.from_body:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.Body
	6,  // 9: tsunami_templated_detector.HttpAction.HttpResponse.ExtractAll.patterns:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.Extract
	6,  // 10: tsunami_templated_detector.HttpAction.HttpResponse.ExtractAny.patterns:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.Extract
	4,  // 11: tsunami_templated_detector.HttpAction.HttpResponse.Expectation.header:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.Header
	5,  // 12: tsunami_templated_detector.HttpAction.HttpResponse.Expectation.body:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.Body
	9,  // 13: tsunami_templated_detector.HttpAction.HttpResponse.ExpectAny.conditions:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.Expectation
	9,  // 14: tsunami_templated_detector.HttpAction.HttpResponse.ExpectAll.conditions:type_name -> tsunami_templated_detector.HttpAction.HttpResponse.Expectation
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_action_http_proto_init() }
func file_action_http_proto_init() {
	if File_action_http_proto != nil {
		return
	}
	file_action_http_proto_msgTypes[2].OneofWrappers = []any{
		(*HttpAction_HttpResponse_ExpectAny_)(nil),
		(*HttpAction_HttpResponse_ExpectAll_)(nil),
		(*HttpAction_HttpResponse_ExtractAny_)(nil),
		(*HttpAction_HttpResponse_ExtractAll_)(nil),
	}
	file_action_http_proto_msgTypes[5].OneofWrappers = []any{
		(*HttpAction_HttpResponse_Extract_FromHeader)(nil),
		(*HttpAction_HttpResponse_Extract_FromBody)(nil),
	}
	file_action_http_proto_msgTypes[8].OneofWrappers = []any{
		(*HttpAction_HttpResponse_Expectation_Header)(nil),
		(*HttpAction_HttpResponse_Expectation_Body)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_action_http_proto_rawDesc), len(file_action_http_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_action_http_proto_goTypes,
		DependencyIndexes: file_action_http_proto_depIdxs,
		EnumInfos:         file_action_http_proto_enumTypes,
		MessageInfos:      file_action_http_proto_msgTypes,
	}.Build()
	File_action_http_proto = out.File
	file_action_http_proto_goTypes = nil
	file_action_http_proto_depIdxs = nil
}
