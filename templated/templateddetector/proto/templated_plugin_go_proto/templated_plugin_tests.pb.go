// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: templated_plugin_tests.proto

package templated_plugin_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines a set of unit test for a templated plugin.
type TemplatedPluginTests struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for this set of unit tests. For example, the name of the
	// plugin being tested.
	Config *TemplatedPluginTests_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The set of tests to run.
	Tests         []*TemplatedPluginTests_Test `protobuf:"bytes,2,rep,name=tests,proto3" json:"tests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplatedPluginTests) Reset() {
	*x = TemplatedPluginTests{}
	mi := &file_templated_plugin_tests_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplatedPluginTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplatedPluginTests) ProtoMessage() {}

func (x *TemplatedPluginTests) ProtoReflect() protoreflect.Message {
	mi := &file_templated_plugin_tests_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplatedPluginTests.ProtoReflect.Descriptor instead.
func (*TemplatedPluginTests) Descriptor() ([]byte, []int) {
	return file_templated_plugin_tests_proto_rawDescGZIP(), []int{0}
}

func (x *TemplatedPluginTests) GetConfig() *TemplatedPluginTests_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TemplatedPluginTests) GetTests() []*TemplatedPluginTests_Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

type TemplatedPluginTests_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reference to the name of the tested plugin. This will be used by the
	// engine to create the tests with the correct plugin.
	TestedPlugin string `protobuf:"bytes,1,opt,name=tested_plugin,json=testedPlugin,proto3" json:"tested_plugin,omitempty"`
	// Whether the test should be disabled.
	Disabled      bool `protobuf:"varint,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplatedPluginTests_Config) Reset() {
	*x = TemplatedPluginTests_Config{}
	mi := &file_templated_plugin_tests_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplatedPluginTests_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplatedPluginTests_Config) ProtoMessage() {}

func (x *TemplatedPluginTests_Config) ProtoReflect() protoreflect.Message {
	mi := &file_templated_plugin_tests_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplatedPluginTests_Config.ProtoReflect.Descriptor instead.
func (*TemplatedPluginTests_Config) Descriptor() ([]byte, []int) {
	return file_templated_plugin_tests_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TemplatedPluginTests_Config) GetTestedPlugin() string {
	if x != nil {
		return x.TestedPlugin
	}
	return ""
}

func (x *TemplatedPluginTests_Config) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type TemplatedPluginTests_Test struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the test.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether this test ensure that the vulnerability is found or not.
	ExpectVulnerability bool `protobuf:"varint,2,opt,name=expect_vulnerability,json=expectVulnerability,proto3" json:"expect_vulnerability,omitempty"`
	// Provides a mock for the callback server.
	MockCallbackServer *MockCallbackServer `protobuf:"bytes,3,opt,name=mock_callback_server,json=mockCallbackServer,proto3" json:"mock_callback_server,omitempty"`
	// Provides a mock for the HTTP server.
	MockHttpServer *MockHttpServer `protobuf:"bytes,4,opt,name=mock_http_server,json=mockHttpServer,proto3" json:"mock_http_server,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TemplatedPluginTests_Test) Reset() {
	*x = TemplatedPluginTests_Test{}
	mi := &file_templated_plugin_tests_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplatedPluginTests_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplatedPluginTests_Test) ProtoMessage() {}

func (x *TemplatedPluginTests_Test) ProtoReflect() protoreflect.Message {
	mi := &file_templated_plugin_tests_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplatedPluginTests_Test.ProtoReflect.Descriptor instead.
func (*TemplatedPluginTests_Test) Descriptor() ([]byte, []int) {
	return file_templated_plugin_tests_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TemplatedPluginTests_Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TemplatedPluginTests_Test) GetExpectVulnerability() bool {
	if x != nil {
		return x.ExpectVulnerability
	}
	return false
}

func (x *TemplatedPluginTests_Test) GetMockCallbackServer() *MockCallbackServer {
	if x != nil {
		return x.MockCallbackServer
	}
	return nil
}

func (x *TemplatedPluginTests_Test) GetMockHttpServer() *MockHttpServer {
	if x != nil {
		return x.MockHttpServer
	}
	return nil
}

var File_templated_plugin_tests_proto protoreflect.FileDescriptor

var file_templated_plugin_tests_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x1a, 0x20, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9f, 0x04, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x73, 0x75, 0x6e,
	0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x51, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x91,
	0x02, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x66,
	0x0a, 0x14, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x4d, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x12, 0x6d, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x10, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x0e, 0x6d, 0x6f, 0x63, 0x6b, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0xa2, 0x01, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x50, 0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61,
	0x6d, 0x69, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x67,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_templated_plugin_tests_proto_rawDescOnce sync.Once
	file_templated_plugin_tests_proto_rawDescData []byte
)

func file_templated_plugin_tests_proto_rawDescGZIP() []byte {
	file_templated_plugin_tests_proto_rawDescOnce.Do(func() {
		file_templated_plugin_tests_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_templated_plugin_tests_proto_rawDesc), len(file_templated_plugin_tests_proto_rawDesc)))
	})
	return file_templated_plugin_tests_proto_rawDescData
}

var file_templated_plugin_tests_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_templated_plugin_tests_proto_goTypes = []any{
	(*TemplatedPluginTests)(nil),        // 0: tsunami_templated_detector_tests.TemplatedPluginTests
	(*TemplatedPluginTests_Config)(nil), // 1: tsunami_templated_detector_tests.TemplatedPluginTests.Config
	(*TemplatedPluginTests_Test)(nil),   // 2: tsunami_templated_detector_tests.TemplatedPluginTests.Test
	(*MockCallbackServer)(nil),          // 3: tsunami_templated_detector_tests.MockCallbackServer
	(*MockHttpServer)(nil),              // 4: tsunami_templated_detector_tests.MockHttpServer
}
var file_templated_plugin_tests_proto_depIdxs = []int32{
	1, // 0: tsunami_templated_detector_tests.TemplatedPluginTests.config:type_name -> tsunami_templated_detector_tests.TemplatedPluginTests.Config
	2, // 1: tsunami_templated_detector_tests.TemplatedPluginTests.tests:type_name -> tsunami_templated_detector_tests.TemplatedPluginTests.Test
	3, // 2: tsunami_templated_detector_tests.TemplatedPluginTests.Test.mock_callback_server:type_name -> tsunami_templated_detector_tests.MockCallbackServer
	4, // 3: tsunami_templated_detector_tests.TemplatedPluginTests.Test.mock_http_server:type_name -> tsunami_templated_detector_tests.MockHttpServer
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_templated_plugin_tests_proto_init() }
func file_templated_plugin_tests_proto_init() {
	if File_templated_plugin_tests_proto != nil {
		return
	}
	file_mock_callback_server_tests_proto_init()
	file_mock_http_server_tests_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_templated_plugin_tests_proto_rawDesc), len(file_templated_plugin_tests_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_templated_plugin_tests_proto_goTypes,
		DependencyIndexes: file_templated_plugin_tests_proto_depIdxs,
		MessageInfos:      file_templated_plugin_tests_proto_msgTypes,
	}.Build()
	File_templated_plugin_tests_proto = out.File
	file_templated_plugin_tests_proto_goTypes = nil
	file_templated_plugin_tests_proto_depIdxs = nil
}
