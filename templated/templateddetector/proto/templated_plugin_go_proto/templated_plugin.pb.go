// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: templated_plugin.proto

package templated_plugin_go_proto

import (
	tsunami_go_proto "github.com/google/tsunami-security-scanner/proto/tsunami_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PluginWorkflow_Condition int32

const (
	PluginWorkflow_CONDITION_UNSPECIFIED    PluginWorkflow_Condition = 0
	PluginWorkflow_REQUIRES_CALLBACK_SERVER PluginWorkflow_Condition = 1
)

// Enum value maps for PluginWorkflow_Condition.
var (
	PluginWorkflow_Condition_name = map[int32]string{
		0: "CONDITION_UNSPECIFIED",
		1: "REQUIRES_CALLBACK_SERVER",
	}
	PluginWorkflow_Condition_value = map[string]int32{
		"CONDITION_UNSPECIFIED":    0,
		"REQUIRES_CALLBACK_SERVER": 1,
	}
)

func (x PluginWorkflow_Condition) Enum() *PluginWorkflow_Condition {
	p := new(PluginWorkflow_Condition)
	*p = x
	return p
}

func (x PluginWorkflow_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginWorkflow_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_templated_plugin_proto_enumTypes[0].Descriptor()
}

func (PluginWorkflow_Condition) Type() protoreflect.EnumType {
	return &file_templated_plugin_proto_enumTypes[0]
}

func (x PluginWorkflow_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginWorkflow_Condition.Descriptor instead.
func (PluginWorkflow_Condition) EnumDescriptor() ([]byte, []int) {
	return file_templated_plugin_proto_rawDescGZIP(), []int{1, 0}
}

// An action is a single unit of work that the plugin can perform. For example
// sending an HTTP request. Each returns a boolean indicating whether the
// action was successful and the last running action defines whether the
// plugin is considered successful (the vulnerability was found).
type PluginAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Each action must have a unique name that will be referenced in the
	// workflows. It must be named using the `[a-zA-Z0-9_]` character set.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A set of cleanup action to be executed if this action is successful.
	// Once the current action succeed, the cleanups are registered and will
	// always be executed after the last workflow action, whether it is successful
	// or not.
	CleanupActions []string `protobuf:"bytes,2,rep,name=cleanup_actions,json=cleanupActions,proto3" json:"cleanup_actions,omitempty"`
	// Each action can have one of the following types.
	//
	// Types that are valid to be assigned to AnyAction:
	//
	//	*PluginAction_HttpRequest
	//	*PluginAction_CallbackServer
	//	*PluginAction_Utility
	AnyAction     isPluginAction_AnyAction `protobuf_oneof:"any_action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginAction) Reset() {
	*x = PluginAction{}
	mi := &file_templated_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginAction) ProtoMessage() {}

func (x *PluginAction) ProtoReflect() protoreflect.Message {
	mi := &file_templated_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginAction.ProtoReflect.Descriptor instead.
func (*PluginAction) Descriptor() ([]byte, []int) {
	return file_templated_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *PluginAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginAction) GetCleanupActions() []string {
	if x != nil {
		return x.CleanupActions
	}
	return nil
}

func (x *PluginAction) GetAnyAction() isPluginAction_AnyAction {
	if x != nil {
		return x.AnyAction
	}
	return nil
}

func (x *PluginAction) GetHttpRequest() *HttpAction {
	if x != nil {
		if x, ok := x.AnyAction.(*PluginAction_HttpRequest); ok {
			return x.HttpRequest
		}
	}
	return nil
}

func (x *PluginAction) GetCallbackServer() *CallbackServerAction {
	if x != nil {
		if x, ok := x.AnyAction.(*PluginAction_CallbackServer); ok {
			return x.CallbackServer
		}
	}
	return nil
}

func (x *PluginAction) GetUtility() *UtilityAction {
	if x != nil {
		if x, ok := x.AnyAction.(*PluginAction_Utility); ok {
			return x.Utility
		}
	}
	return nil
}

type isPluginAction_AnyAction interface {
	isPluginAction_AnyAction()
}

type PluginAction_HttpRequest struct {
	HttpRequest *HttpAction `protobuf:"bytes,3,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

type PluginAction_CallbackServer struct {
	CallbackServer *CallbackServerAction `protobuf:"bytes,4,opt,name=callback_server,json=callbackServer,proto3,oneof"`
}

type PluginAction_Utility struct {
	Utility *UtilityAction `protobuf:"bytes,5,opt,name=utility,proto3,oneof"`
}

func (*PluginAction_HttpRequest) isPluginAction_AnyAction() {}

func (*PluginAction_CallbackServer) isPluginAction_AnyAction() {}

func (*PluginAction_Utility) isPluginAction_AnyAction() {}

// A workflow is a sequence of actions taken in linear order. Having different
// workflows allows the plugin to cover different scenarios based on the
// current Tsunami runtime, for example if the callback server is running.
// Workflows should be defined in order of priority, the first matching workflow
// will be the one selected for running.
type PluginWorkflow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The condition that must be met for this workflow to be selected to run.
	Condition PluginWorkflow_Condition `protobuf:"varint,1,opt,name=condition,proto3,enum=tsunami_templated_detector.PluginWorkflow_Condition" json:"condition,omitempty"`
	// Variables defined at the workflow level that will be available to all
	// actions running in this workflow. These variables are reset to the value
	// defined here between each workflow run.
	Variables []*PluginWorkflow_Variable `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
	// List of actions (by name) to be run in this workflow.
	Actions       []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginWorkflow) Reset() {
	*x = PluginWorkflow{}
	mi := &file_templated_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginWorkflow) ProtoMessage() {}

func (x *PluginWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_templated_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginWorkflow.ProtoReflect.Descriptor instead.
func (*PluginWorkflow) Descriptor() ([]byte, []int) {
	return file_templated_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *PluginWorkflow) GetCondition() PluginWorkflow_Condition {
	if x != nil {
		return x.Condition
	}
	return PluginWorkflow_CONDITION_UNSPECIFIED
}

func (x *PluginWorkflow) GetVariables() []*PluginWorkflow_Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *PluginWorkflow) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Each plugin can be slightly configured. For example, it can be disabled or
// debug mode can be enabled.
type PluginConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the plugin is to be disabled. By default, plugins are enabled. So
	// we recommend using this option only to explicitly disable a plugin.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Debug mode enables very verbose logging for the plugin. For example, for
	// HTTP requests, every request and response will be logged.
	Debug         bool `protobuf:"varint,2,opt,name=debug,proto3" json:"debug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginConfig) Reset() {
	*x = PluginConfig{}
	mi := &file_templated_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginConfig) ProtoMessage() {}

func (x *PluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_templated_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginConfig.ProtoReflect.Descriptor instead.
func (*PluginConfig) Descriptor() ([]byte, []int) {
	return file_templated_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *PluginConfig) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *PluginConfig) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type TemplatedPlugin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Plugin metadata, such as its name, author and description.
	Info *tsunami_go_proto.PluginInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// Finding that this plugin will report if it finds a vulnerability.
	Finding *tsunami_go_proto.Vulnerability `protobuf:"bytes,2,opt,name=finding,proto3" json:"finding,omitempty"`
	// Plugin-level configuration. For example, to enable debug mode.
	Config *PluginConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// Actions that the plugin can run.
	Actions []*PluginAction `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// Workflows that the plugin can run.
	Workflows     []*PluginWorkflow `protobuf:"bytes,5,rep,name=workflows,proto3" json:"workflows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplatedPlugin) Reset() {
	*x = TemplatedPlugin{}
	mi := &file_templated_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplatedPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplatedPlugin) ProtoMessage() {}

func (x *TemplatedPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_templated_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplatedPlugin.ProtoReflect.Descriptor instead.
func (*TemplatedPlugin) Descriptor() ([]byte, []int) {
	return file_templated_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *TemplatedPlugin) GetInfo() *tsunami_go_proto.PluginInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *TemplatedPlugin) GetFinding() *tsunami_go_proto.Vulnerability {
	if x != nil {
		return x.Finding
	}
	return nil
}

func (x *TemplatedPlugin) GetConfig() *PluginConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TemplatedPlugin) GetActions() []*PluginAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TemplatedPlugin) GetWorkflows() []*PluginWorkflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

type PluginWorkflow_Variable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginWorkflow_Variable) Reset() {
	*x = PluginWorkflow_Variable{}
	mi := &file_templated_plugin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginWorkflow_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginWorkflow_Variable) ProtoMessage() {}

func (x *PluginWorkflow_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_templated_plugin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginWorkflow_Variable.ProtoReflect.Descriptor instead.
func (*PluginWorkflow_Variable) Descriptor() ([]byte, []int) {
	return file_templated_plugin_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PluginWorkflow_Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginWorkflow_Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_templated_plugin_proto protoreflect.FileDescriptor

var file_templated_plugin_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d,
	0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x1a, 0x1b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x02, 0x0a, 0x0c, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x6e, 0x79,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x02, 0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x52, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x34, 0x0a, 0x08, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x44, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x22, 0x40, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc8, 0x02, 0x0a, 0x0f, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2d, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x73,
	0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x07,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d,
	0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x42, 0x9c, 0x01, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x2d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2d,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_templated_plugin_proto_rawDescOnce sync.Once
	file_templated_plugin_proto_rawDescData []byte
)

func file_templated_plugin_proto_rawDescGZIP() []byte {
	file_templated_plugin_proto_rawDescOnce.Do(func() {
		file_templated_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_templated_plugin_proto_rawDesc), len(file_templated_plugin_proto_rawDesc)))
	})
	return file_templated_plugin_proto_rawDescData
}

var file_templated_plugin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_templated_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_templated_plugin_proto_goTypes = []any{
	(PluginWorkflow_Condition)(0),          // 0: tsunami_templated_detector.PluginWorkflow.Condition
	(*PluginAction)(nil),                   // 1: tsunami_templated_detector.PluginAction
	(*PluginWorkflow)(nil),                 // 2: tsunami_templated_detector.PluginWorkflow
	(*PluginConfig)(nil),                   // 3: tsunami_templated_detector.PluginConfig
	(*TemplatedPlugin)(nil),                // 4: tsunami_templated_detector.TemplatedPlugin
	(*PluginWorkflow_Variable)(nil),        // 5: tsunami_templated_detector.PluginWorkflow.Variable
	(*HttpAction)(nil),                     // 6: tsunami_templated_detector.HttpAction
	(*CallbackServerAction)(nil),           // 7: tsunami_templated_detector.CallbackServerAction
	(*UtilityAction)(nil),                  // 8: tsunami_templated_detector.UtilityAction
	(*tsunami_go_proto.PluginInfo)(nil),    // 9: tsunami.proto.PluginInfo
	(*tsunami_go_proto.Vulnerability)(nil), // 10: tsunami.proto.Vulnerability
}
var file_templated_plugin_proto_depIdxs = []int32{
	6,  // 0: tsunami_templated_detector.PluginAction.http_request:type_name -> tsunami_templated_detector.HttpAction
	7,  // 1: tsunami_templated_detector.PluginAction.callback_server:type_name -> tsunami_templated_detector.CallbackServerAction
	8,  // 2: tsunami_templated_detector.PluginAction.utility:type_name -> tsunami_templated_detector.UtilityAction
	0,  // 3: tsunami_templated_detector.PluginWorkflow.condition:type_name -> tsunami_templated_detector.PluginWorkflow.Condition
	5,  // 4: tsunami_templated_detector.PluginWorkflow.variables:type_name -> tsunami_templated_detector.PluginWorkflow.Variable
	9,  // 5: tsunami_templated_detector.TemplatedPlugin.info:type_name -> tsunami.proto.PluginInfo
	10, // 6: tsunami_templated_detector.TemplatedPlugin.finding:type_name -> tsunami.proto.Vulnerability
	3,  // 7: tsunami_templated_detector.TemplatedPlugin.config:type_name -> tsunami_templated_detector.PluginConfig
	1,  // 8: tsunami_templated_detector.TemplatedPlugin.actions:type_name -> tsunami_templated_detector.PluginAction
	2,  // 9: tsunami_templated_detector.TemplatedPlugin.workflows:type_name -> tsunami_templated_detector.PluginWorkflow
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_templated_plugin_proto_init() }
func file_templated_plugin_proto_init() {
	if File_templated_plugin_proto != nil {
		return
	}
	file_action_http_proto_init()
	file_action_callbackserver_proto_init()
	file_action_utils_proto_init()
	file_templated_plugin_proto_msgTypes[0].OneofWrappers = []any{
		(*PluginAction_HttpRequest)(nil),
		(*PluginAction_CallbackServer)(nil),
		(*PluginAction_Utility)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_templated_plugin_proto_rawDesc), len(file_templated_plugin_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_templated_plugin_proto_goTypes,
		DependencyIndexes: file_templated_plugin_proto_depIdxs,
		EnumInfos:         file_templated_plugin_proto_enumTypes,
		MessageInfos:      file_templated_plugin_proto_msgTypes,
	}.Build()
	File_templated_plugin_proto = out.File
	file_templated_plugin_proto_goTypes = nil
	file_templated_plugin_proto_depIdxs = nil
}
