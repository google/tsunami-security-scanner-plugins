plugins {
    id 'java-library'
    id 'com.google.protobuf' version '0.9.4'
    id 'idea'
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url 'https://maven-central.storage-download.googleapis.com/repos/central/data/'
    }
    mavenCentral()
    mavenLocal()
}

ext {
    tsunamiVersion = 'latest.release'
    protobufVersion = '4.29.1'
    protocVersion = protobufVersion
    grpcVersion = '1.68.1'
    jspecifyVersion = 'latest.release'

    okhttpVersion = 'latest.release'
    junitVersion = 'latest.release'
    truthVersion = 'latest.release'
    testParamInjectorVersion = 'latest.release'
}

abstract class CompileTextproto extends DefaultTask {
    {
        group = 'build'
        description = 'Compiles textproto files into binary proto files.'
    }

    // The input textproto files.
    @InputFiles
    abstract Property<FileTree> getSourceFiles()

    // The proto message type to use to encode the textproto files.
    @Input
    abstract Property<String> getEncodeAs()

    // The proto file where the message type (specified in EncodeAs) is defined.
    // Note: the proto file is expected to be in the `proto` directory.
    @Input
    abstract Property<String> getFromProto()

    // The output directory where the binary proto files should be written.
    @OutputDirectory
    abstract DirectoryProperty getOutputDirectory()

    @TaskAction
    void executeTask() {
        def protoDir = project.file("proto")
        def extractedProtos = project.file("${project.buildDir}/extracted-protos/main/")
        def includeProtos = project.file("${project.buildDir}/extracted-include-protos/main/")

        sourceFiles.get().forEach{
            def srcFile = project.file(it.getAbsolutePath())
            def outFile = project.file(outputDirectory.get().file(it.name.replace(".textproto", ".binarypb")))

            project.exec {
                commandLine "protoc", "-I=${protoDir}", "-I=${includeProtos}", "-I=${extractedProtos}", "--encode=${encodeAs.get()}", "${fromProto.get()}"
                standardInput = new FileInputStream(srcFile)
                standardOutput = new FileOutputStream(outFile)
            }
        }
    }
}

tasks.register("generatePluginsProtobin", CompileTextproto) {
    encodeAs = "tsunami_templated_detector.TemplatedPlugin"
    fromProto = "templated_plugin.proto"
    sourceFiles = fileTree("plugins").matching {
        include "**/*.textproto"
        exclude "**/*_test.textproto"
    }
    outputDirectory = file("$buildDir/src/main/resources/templateddetector/plugins")
}

tasks.register("generateTestsProtobin", CompileTextproto) {
    encodeAs = "tsunami_templated_detector_tests.TemplatedPluginTests"
    fromProto = "templated_plugin_tests.proto"
    sourceFiles = fileTree("plugins").matching {
        include "**/*_test.textproto"
    }
    outputDirectory = file("$buildDir/src/test/resources/templateddetector/plugins")
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs += ["-parameters"]
    }
}

gradle.projectsEvaluated {
    tasks.withType(ProcessResources) {
        dependsOn(generatePluginsProtobin)
        dependsOn(generateTestsProtobin)
    }
}

protobuf {
    generatedFilesBaseDir = "${projectDir}/build/generated"
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

idea {
    module {
        sourceDirs += file("${buildDir}/generated/main/java");
        sourceDirs += file("${buildDir}/generated/main/grpc");
    }
}

sourceSets {
    main {
        proto {
            srcDir "proto/"
            exclude "build/**"
        }

        resources {
            srcDirs += "${buildDir}/src/main/resources";
        }
    }

    test {
        resources {
            srcDirs += "${buildDir}/src/test/resources";
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    jar.manifest {
        attributes('Implementation-Title': name,
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': sourceCompatibility,
                'Target-Compatibility': targetCompatibility)
    }

    javadoc.options {
        encoding = 'UTF-8'
        use = true
        links 'https://docs.oracle.com/javase/8/docs/api/'
    }

    test {
        testLogging {
            exceptionFormat = 'full'
            showExceptions true
            showCauses true
            showStackTraces true
        }
        maxHeapSize = '1500m'
    }
}

dependencies {
    implementation "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    implementation "com.google.tsunami:tsunami-common:${tsunamiVersion}"
    implementation "com.google.tsunami:tsunami-plugin:${tsunamiVersion}"
    implementation "com.google.tsunami:tsunami-proto:${tsunamiVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "org.jspecify:jspecify:${jspecifyVersion}"

    testImplementation "com.google.truth:truth:${truthVersion}"
    testImplementation "com.google.truth.extensions:truth-java8-extension:${truthVersion}"
    testImplementation "com.google.truth.extensions:truth-proto-extension:${truthVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
    testImplementation "com.google.testparameterinjector:test-parameter-injector:${testParamInjectorVersion}"
    testImplementation "junit:junit:${junitVersion}"
}